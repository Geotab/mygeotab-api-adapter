using Geotab.Checkmate.ObjectModel.Exceptions;
using MyGeotabAPIAdapter.Database;
using MyGeotabAPIAdapter.Database.Models;

namespace MyGeotabAPIAdapter.GeotabObjectMappers
{
    /// <summary>
    /// Interface for a class with methods involving mapping between <see cref="Rule"/> and <see cref="DbRule"/> entities.
    /// </summary>
    public class GeotabRuleDbRuleObjectMapper : IGeotabRuleDbRuleObjectMapper
    {
        /// <inheritdoc/>
        public DbRule CreateEntity(Rule entityToMapTo, Common.DatabaseRecordStatus entityStatus = Common.DatabaseRecordStatus.Active)
        {
            string ruleComment = entityToMapTo.Comment;

            if (ruleComment != null && ruleComment.Length == 0)
            {
                ruleComment = String.Empty;
            }

            DbRule dbRule = new()
            {
                ActiveFrom = entityToMapTo.ActiveFrom,
                ActiveTo = entityToMapTo.ActiveTo,
                BaseType = entityToMapTo.BaseType.ToString(),
                Comment = ruleComment,
                DatabaseWriteOperationType = Database.Common.DatabaseWriteOperationType.Insert,
                EntityStatus = (int)entityStatus,
                GeotabId = entityToMapTo.Id.ToString(),
                Name = entityToMapTo.Name.ToString(),
                RecordLastChangedUtc = DateTime.UtcNow,
                Version = entityToMapTo.Version
            };
            return dbRule;
        }

        /// <inheritdoc/>
        public bool EntityRequiresUpdate(DbRule entityToEvaluate, Rule entityToMapTo)
        {
            if (entityToEvaluate.GeotabId != entityToMapTo.Id.ToString())
            {
                throw new ArgumentException($"Cannot compare {nameof(DbRule)} '{entityToEvaluate.id}' with {nameof(Rule)} '{entityToMapTo.Id}' because the IDs do not match.");
            }

            DateTime entityToEvaluateActiveFromUtc = entityToEvaluate.ActiveFrom.GetValueOrDefault().ToUniversalTime();
            DateTime entityToEvaluateActiveToUtc = entityToEvaluate.ActiveTo.GetValueOrDefault().ToUniversalTime();
            if (entityToEvaluate.ActiveFrom != entityToMapTo.ActiveFrom && entityToEvaluateActiveFromUtc != entityToMapTo.ActiveFrom)
            {
                return true;
            }
            if (entityToEvaluate.ActiveTo != entityToMapTo.ActiveTo && entityToEvaluateActiveToUtc != entityToMapTo.ActiveTo)
            {
                return true;
            }
            string entityToMapToBaseType = entityToMapTo.BaseType.ToString();
            if (entityToEvaluate.BaseType != entityToMapToBaseType || entityToEvaluate.Comment != entityToMapTo.Comment || entityToEvaluate.Name != entityToMapTo.Name || entityToEvaluate.Version != entityToMapTo.Version)
            {
                return true;
            }
            return false;
        }

        /// <inheritdoc/>
        public DbRule UpdateEntity(DbRule entityToUpdate, Rule entityToMapTo, Common.DatabaseRecordStatus entityStatus = Common.DatabaseRecordStatus.Active)
        {
            if (entityToUpdate.GeotabId != entityToMapTo.Id.ToString())
            {
                throw new ArgumentException($"Cannot update {nameof(DbRule)} '{entityToUpdate.id} (GeotabId {entityToUpdate.GeotabId})' with {nameof(Rule)} '{entityToMapTo.Id}' because the GeotabIds do not match.");
            }

            var updatedDbRule = CreateEntity(entityToMapTo);

            // Update id since id is auto-generated by the database on insert and is therefor not set by the CreateEntity method.
            updatedDbRule.id = entityToUpdate.id;
            updatedDbRule.DatabaseWriteOperationType = Common.DatabaseWriteOperationType.Update;

            return updatedDbRule;
        }
    }
}
